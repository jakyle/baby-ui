# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
	globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Caregiver
	@model
	@auth(
		rules: [
			{ allow: public },
			{ allow: owner },
			{ allow: groups, groups: ["family"], operations: [read] }
		]
	) {
	family: Family @belongsTo @auth(rules: [{ allow: public }, { allow: owner }])
	userId: String! @index(name: "byUser", queryField: "caregiverByUser")
	email: AWSEmail!
	name: String
	pendingInvites: [PendingFamilyInvite] @hasMany(filter: { caregiverId: { eq: $caregiverId } })
		@auth(
			rules: [
				{ allow: public },
				{ allow: owner },
				{ allow: groups, groups: ["family"], operations: [update] }
			]
		)
	formulaFeeding: [FormulaFeeding] @hasMany
	diaperChanges: [DiaperChange] @hasMany
}


enum Gender {
	MALE
	FEMALE
}

type PendingFamilyInvite @model {
	caregiverId: ID!,
	familyId: ID!,
	familyName: String!
	caregiver: Caregiver! @belongsTo
}

type Family @model @auth(rules: [{ allow: public }, { allow: groups, groups: ["family"] }]) {
	caregivers: [Caregiver] @hasMany
	babies: [Baby] @hasMany
	name: String!
}

type Baby @model @auth(rules: [{ allow: public }, { allow: groups, groups: ["family"] }]) {
	name: String!
	dateOfBirth: String!
	gender: Gender!
	family: Family @belongsTo
	formulaFeeding: [FormulaFeeding] @hasMany
	diaperChanges: [DiaperChange] @hasMany
}

type FormulaFeeding
	@model
	@searchable
	@auth(
		rules: [
			{ allow: public },
			{ allow: groups, groups: ["family"], operations: [read] },
			{ allow: owner }
		]
	) {
	by: Caregiver! @belongsTo
	when: AWSDateTime! 
	for: Baby! @belongsTo
	type: String! @index(name: "byFeedingDate", queryField: "byFeedingDate", sortKeyFields: ["when"])
	oz: Int!
	nextFeeding: AWSDateTime!
}

enum Waste {
	PEE
	POOP
	BOTH
}

type DiaperChange
	@model
	@searchable
	@auth(
		rules: [
			{ allow: public },
			{ allow: groups, groups: ["family"], operations: [read] },
			{ allow: owner }
		]
	) {
	by: Caregiver! @belongsTo
	when: AWSDateTime!
	for: Baby! @belongsTo
	type: String! @index(name: "byDiaperChangeDate", queryField: "byDiaperChangeDate", sortKeyFields: ["when"])
	waste: Waste!
}
